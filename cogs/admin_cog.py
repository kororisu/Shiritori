# Noitu/cogs/admin_cog.py
import discord
from discord.ext import commands
from discord import app_commands
import traceback

from .. import utils 
from .. import database
from .. import config as bot_cfg 

class AdminCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot 

    config_slash_group = app_commands.Group(name="config", description="C·∫•u h√¨nh bot N·ªëi T·ª´ cho server n√†y.", guild_only=True)

    @commands.Cog.listener()
    async def on_guild_join(self, guild: discord.Guild):
        await database.get_guild_config(self.bot.db_pool, guild.id) 
        print(f"ƒê√£ tham gia server m·ªõi: {guild.name} (ID: {guild.id}). C·∫•u h√¨nh k√™nh m·∫∑c ƒë·ªãnh l√† NULL.")

    @commands.group(name="config", invoke_without_command=True)
    @commands.has_permissions(manage_guild=True) 
    @commands.guild_only() 
    async def config_group_prefix(self, ctx: commands.Context):
        guild_cfg = await database.get_guild_config(self.bot.db_pool, ctx.guild.id)
        prefix = guild_cfg.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg else bot_cfg.DEFAULT_COMMAND_PREFIX
        help_msg = (
            f"D√πng: `{prefix}config prefix <k√≠ t·ª±>`, `{prefix}config timeout <gi√¢y>`, "
            f"`{prefix}config minplayers <s·ªë>`.\n"
            f"ƒê·ªÉ c·∫•u h√¨nh k√™nh ch∆°i, vui l√≤ng d√πng l·ªánh slash:\n"
            f"`/config set_vn_channel <#k√™nh>`\n"
            f"`/config set_jp_channel <#k√™nh>`\n"
            f"Ho·∫∑c d√πng c√°c l·ªánh slash kh√°c nh∆∞ `/config view ...`."
        )
        await utils._send_message_smart(ctx, help_msg) 

    @config_group_prefix.error 
    async def config_prefix_error(self, ctx, error):
        msg = ""
        if isinstance(error, commands.MissingPermissions):
            msg = "B·∫°n kh√¥ng c√≥ quy·ªÅn `Qu·∫£n l√Ω Server`."
        elif isinstance(error, commands.NoPrivateMessage): 
            msg = "L·ªánh n√†y kh√¥ng d√πng trong DM."
        elif isinstance(error, commands.BadArgument): 
            msg = f"Gi√° tr·ªã kh√¥ng h·ª£p l·ªá: {error}"
        elif isinstance(error, commands.CommandInvokeError): 
            print(f"L·ªói config (prefix): {error.original}")
            traceback.print_exc()
            msg = f"L·ªói khi th·ª±c thi: {error.original}"
        else: 
            print(f"L·ªói config (prefix) kh√¥ng r√µ: {error}")
            msg = f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {error}"
        await utils._send_message_smart(ctx, msg, ephemeral=True)

    @config_group_prefix.command(name="prefix")
    @commands.has_permissions(manage_guild=True)
    @commands.guild_only()
    async def config_prefix_set(self, ctx: commands.Context, new_prefix: str):
        if not (1 <= len(new_prefix) <= 5): 
            await utils._send_message_smart(ctx, "Prefix ph·∫£i t·ª´ 1-5 k√Ω t·ª±.", ephemeral=True); return
        await database.set_guild_config_value(self.bot.db_pool, ctx.guild.id, "command_prefix", new_prefix)
        await utils._send_message_smart(ctx, f"‚úÖ ƒê√£ ƒë·ªïi prefix server th√†nh: `{new_prefix}`", ephemeral=True)

    @config_group_prefix.command(name="timeout")
    @commands.has_permissions(manage_guild=True)
    @commands.guild_only()
    async def config_timeout_set(self, ctx: commands.Context, seconds: int):
        if not 10 <= seconds <= 300: 
            await utils._send_message_smart(ctx, "Timeout ph·∫£i t·ª´ 10-300s.", ephemeral=True); return
        await database.set_guild_config_value(self.bot.db_pool, ctx.guild.id, "timeout_seconds", seconds)
        await utils._send_message_smart(ctx, f"‚úÖ ƒê√£ ƒë·ªïi timeout th·∫Øng th√†nh: `{seconds}` gi√¢y.", ephemeral=True)

    @config_group_prefix.command(name="minplayers")
    @commands.has_permissions(manage_guild=True)
    @commands.guild_only()
    async def config_minplayers_set(self, ctx: commands.Context, count: int):
        if not 1 <= count <= 10: 
            await utils._send_message_smart(ctx, "S·ªë ng∆∞·ªùi ch∆°i t·ªëi thi·ªÉu ph·∫£i t·ª´ 1-10.", ephemeral=True); return
        await database.set_guild_config_value(self.bot.db_pool, ctx.guild.id, "min_players_for_timeout", count)
        await utils._send_message_smart(ctx, f"‚úÖ ƒê√£ ƒë·ªïi s·ªë ng∆∞·ªùi ch∆°i t·ªëi thi·ªÉu k√≠ch ho·∫°t timeout th√†nh: `{count}`.", ephemeral=True)

    @config_slash_group.command(name="view", description="Xem c·∫•u h√¨nh N·ªëi T·ª´ hi·ªán t·∫°i c·ªßa server.")
    @app_commands.checks.has_permissions(manage_guild=True) 
    async def slash_config_view(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True) 

        cfg = await database.get_guild_config(self.bot.db_pool, interaction.guild_id)
        prefix = cfg.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX)
        timeout = cfg.get("timeout_seconds", bot_cfg.DEFAULT_TIMEOUT_SECONDS)
        min_players = cfg.get("min_players_for_timeout", bot_cfg.DEFAULT_MIN_PLAYERS_FOR_TIMEOUT)
        
        vn_channel_id = cfg.get("vn_channel_id")
        jp_channel_id = cfg.get("jp_channel_id")

        vn_channel_mention = f"<#{vn_channel_id}>" if vn_channel_id else "Ch∆∞a ƒë·∫∑t"
        jp_channel_mention = f"<#{jp_channel_id}>" if jp_channel_id else "Ch∆∞a ƒë·∫∑t"
        
        embed = discord.Embed(title=f"{bot_cfg.CONFIG_ICON} C·∫•u h√¨nh N·ªëi T·ª´", color=bot_cfg.EMBED_COLOR_CONFIG)
        if interaction.guild.icon:
            embed.set_thumbnail(url=interaction.guild.icon.url)
        
        embed.add_field(name=f"{bot_cfg.GAME_VN_ICON} K√™nh Ti·∫øng Vi·ªát (VN)", value=vn_channel_mention, inline=True)
        embed.add_field(name=f"{bot_cfg.GAME_JP_ICON} K√™nh Ti·∫øng Nh·∫≠t (JP)", value=jp_channel_mention, inline=True)
        embed.add_field(name="üìù Prefix L·ªánh", value=f"`{prefix}`", inline=True)
        embed.add_field(name="‚è±Ô∏è Th·ªùi Gian Timeout Th·∫Øng", value=f"`{timeout}` gi√¢y", inline=False)
        embed.add_field(name="üë• S·ªë Ng∆∞·ªùi Ch∆°i T·ªëi Thi·ªÉu (k√≠ch ho·∫°t timeout)", value=f"`{min_players}` ng∆∞·ªùi", inline=False)
        
        footer_parts = [f"Server: {interaction.guild.name}"]
        if vn_channel_id and vn_channel_id == jp_channel_id:
            footer_parts.append("‚ö†Ô∏è C·∫¢NH B√ÅO: M·ªôt k√™nh ƒë∆∞·ª£c ƒë·∫∑t cho c·∫£ VN v√† JP. K√™nh n√†y s·∫Ω ho·∫°t ƒë·ªông theo c·∫•u h√¨nh ƒë∆∞·ª£c ƒë·∫∑t sau c√πng.")

        if footer_parts:
            embed.set_footer(text=" | ".join(footer_parts))

        await interaction.followup.send(embed=embed, ephemeral=True)

    @config_slash_group.command(name="set_prefix", description="ƒê·∫∑t prefix l·ªánh m·ªõi cho bot (1-5 k√Ω t·ª±).")
    @app_commands.describe(new_prefix="Prefix m·ªõi (v√≠ d·ª•: 'n!', '?').")
    @app_commands.checks.has_permissions(manage_guild=True)
    async def slash_config_set_prefix(self, interaction: discord.Interaction, new_prefix: str):
        await interaction.response.defer(ephemeral=True)
        if not (1 <= len(new_prefix) <= 5):
            await interaction.followup.send("Prefix ph·∫£i t·ª´ 1-5 k√Ω t·ª±.", ephemeral=True); return
        await database.set_guild_config_value(self.bot.db_pool, interaction.guild_id, "command_prefix", new_prefix)
        await interaction.followup.send(f"‚úÖ ƒê√£ ƒë·ªïi prefix server th√†nh: `{new_prefix}`", ephemeral=True)

    @config_slash_group.command(name="set_timeout", description="ƒê·∫∑t th·ªùi gian timeout th·∫Øng m·ªõi (10-300 gi√¢y).")
    @app_commands.describe(seconds="Th·ªùi gian timeout m·ªõi (gi√¢y, v√≠ d·ª•: 60).")
    @app_commands.checks.has_permissions(manage_guild=True)
    async def slash_config_set_timeout(self, interaction: discord.Interaction, seconds: int):
        await interaction.response.defer(ephemeral=True)
        if not 10 <= seconds <= 300:
            await interaction.followup.send("Th·ªùi gian timeout ph·∫£i t·ª´ 10 ƒë·∫øn 300 gi√¢y.", ephemeral=True); return
        await database.set_guild_config_value(self.bot.db_pool, interaction.guild_id, "timeout_seconds", seconds)
        await interaction.followup.send(f"‚úÖ ƒê√£ ƒë·ªïi th·ªùi gian timeout th·∫Øng th√†nh: `{seconds}` gi√¢y.", ephemeral=True)

    @config_slash_group.command(name="set_minplayers", description="S·ªë ng∆∞·ªùi ch∆°i t·ªëi thi·ªÉu ƒë·ªÉ k√≠ch ho·∫°t timeout (1-10).")
    @app_commands.describe(count="S·ªë ng∆∞·ªùi ch∆°i t·ªëi thi·ªÉu m·ªõi (v√≠ d·ª•: 2).")
    @app_commands.checks.has_permissions(manage_guild=True)
    async def slash_config_set_minplayers(self, interaction: discord.Interaction, count: int):
        await interaction.response.defer(ephemeral=True)
        if not 1 <= count <= 10:
            await interaction.followup.send("S·ªë ng∆∞·ªùi ch∆°i t·ªëi thi·ªÉu ph·∫£i t·ª´ 1 ƒë·∫øn 10.", ephemeral=True); return
        await database.set_guild_config_value(self.bot.db_pool, interaction.guild_id, "min_players_for_timeout", count)
        await interaction.followup.send(f"‚úÖ ƒê√£ ƒë·ªïi s·ªë ng∆∞·ªùi ch∆°i t·ªëi thi·ªÉu ƒë·ªÉ k√≠ch ho·∫°t timeout th√†nh: `{count}`.", ephemeral=True)

    @config_slash_group.command(name="set_vn_channel", description="ƒê·∫∑t k√™nh ch∆°i N·ªëi T·ª´ Ti·∫øng Vi·ªát cho server.")
    @app_commands.describe(channel="K√™nh text s·∫Ω d√πng ƒë·ªÉ ch∆°i Ti·∫øng Vi·ªát.")
    @app_commands.checks.has_permissions(manage_guild=True)
    async def slash_config_set_vn_channel(self, interaction: discord.Interaction, channel: discord.TextChannel):
        await interaction.response.defer(ephemeral=True)
        
        current_config = await database.get_guild_config(self.bot.db_pool, interaction.guild_id)
        jp_channel_id_current = current_config.get("jp_channel_id") if current_config else None

        if jp_channel_id_current == channel.id:
            await database.set_guild_config_value(self.bot.db_pool, interaction.guild_id, "jp_channel_id", None)
            await interaction.followup.send(f"‚ÑπÔ∏è K√™nh {channel.mention} ƒë√£ ƒë∆∞·ª£c g·ª° kh·ªèi c·∫•u h√¨nh k√™nh Ti·∫øng Nh·∫≠t.", ephemeral=True, suppress_embeds=True) # suppress_embeds for followup

        await database.set_guild_config_value(self.bot.db_pool, interaction.guild_id, "vn_channel_id", channel.id)
        await interaction.followup.send(f"‚úÖ K√™nh {channel.mention} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√†m k√™nh N·ªëi T·ª´ {bot_cfg.GAME_VN_ICON} Ti·∫øng Vi·ªát.", ephemeral=True, suppress_embeds=True)


    @config_slash_group.command(name="set_jp_channel", description="ƒê·∫∑t k√™nh ch∆°i N·ªëi T·ª´ Ti·∫øng Nh·∫≠t (Shiritori) cho server.")
    @app_commands.describe(channel="K√™nh text s·∫Ω d√πng ƒë·ªÉ ch∆°i Ti·∫øng Nh·∫≠t.")
    @app_commands.checks.has_permissions(manage_guild=True)
    async def slash_config_set_jp_channel(self, interaction: discord.Interaction, channel: discord.TextChannel):
        await interaction.response.defer(ephemeral=True)

        if not self.bot.kakasi:
            await interaction.followup.send(
                "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·∫∑t k√™nh Ti·∫øng Nh·∫≠t do bot hi·ªán t·∫°i ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng (thi·∫øu th∆∞ vi·ªán PyKakasi). "
                "Vui l√≤ng li√™n h·ªá ng∆∞·ªùi qu·∫£n l√Ω bot.", 
                ephemeral=True
            )
            return

        current_config = await database.get_guild_config(self.bot.db_pool, interaction.guild_id)
        vn_channel_id_current = current_config.get("vn_channel_id") if current_config else None
        
        if vn_channel_id_current == channel.id:
            await database.set_guild_config_value(self.bot.db_pool, interaction.guild_id, "vn_channel_id", None)
            await interaction.followup.send(f"‚ÑπÔ∏è K√™nh {channel.mention} ƒë√£ ƒë∆∞·ª£c g·ª° kh·ªèi c·∫•u h√¨nh k√™nh Ti·∫øng Vi·ªát.", ephemeral=True, suppress_embeds=True)
            
        await database.set_guild_config_value(self.bot.db_pool, interaction.guild_id, "jp_channel_id", channel.id)
        await interaction.followup.send(f"‚úÖ K√™nh {channel.mention} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√†m k√™nh N·ªëi T·ª´ {bot_cfg.GAME_JP_ICON} Ti·∫øng Nh·∫≠t (Shiritori).", ephemeral=True, suppress_embeds=True)

    async def cog_app_command_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        error_message = "C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh config." 
        log_error = True 

        if isinstance(error, app_commands.MissingPermissions): 
            error_message = "B·∫°n kh√¥ng c√≥ quy·ªÅn `Qu·∫£n l√Ω Server` ƒë·ªÉ d√πng l·ªánh n√†y."
            log_error = False 
        elif isinstance(error, app_commands.CommandInvokeError) and isinstance(error.original, (ValueError, TypeError)): 
            error_message = f"Gi√° tr·ªã kh√¥ng h·ª£p l·ªá: {error.original}"
            log_error = False
        elif isinstance(error, app_commands.CheckFailure): 
            error_message = "B·∫°n kh√¥ng ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán ƒë·ªÉ d√πng l·ªánh n√†y."
            log_error = False
        elif isinstance(error, app_commands.CommandAlreadyRegistered): 
            error_message = f"L·ªánh '{error.name}' ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω r·ªìi. Vui l√≤ng ki·ªÉm tra l·∫°i code."
            print(f"L·ªói CommandAlreadyRegistered trong cog_app_command_error cho l·ªánh: {error.name}") 
            log_error = True 
        elif isinstance(error, app_commands.TransformerError) and isinstance(error.value, discord.TextChannel): 
             error_message = f"Kh√¥ng th·ªÉ t√¨m th·∫•y ho·∫∑c k√™nh `{str(error.value)}` kh√¥ng ph·∫£i k√™nh text h·ª£p l·ªá."
             log_error = False

        if log_error: 
            print(f"L·ªói l·ªánh /config (error handler for cog): {error}")
            traceback.print_exc()

        if not interaction.response.is_done():
            await interaction.response.send_message(error_message, ephemeral=True)
        else:
            try:
                await interaction.followup.send(error_message, ephemeral=True)
            except discord.HTTPException: 
                print(f"Kh√¥ng th·ªÉ g·ª≠i followup error cho /config sau khi ƒë√£ response: {error_message}")

async def setup(bot: commands.Bot): 
    cog = AdminCog(bot)
    await bot.add_cog(cog)