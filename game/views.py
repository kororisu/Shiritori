# Noitu/game/views.py
import discord
from discord.ui import Button, View
import traceback
from typing import Callable, Coroutine, Any
from .. import utils 
from discord.ext import commands


class PostGameView(View):
    def __init__(self, channel: discord.TextChannel, original_starter_id: int, 
                 command_prefix_for_guild: str, bot_instance: commands.Bot, # Nh·∫≠n bot_instance
                 internal_start_game_callable: Callable[..., Coroutine[Any, Any, None]],
                 timeout=180):
        super().__init__(timeout=timeout)
        self.channel = channel
        self.original_starter_id = original_starter_id
        self.command_prefix_for_guild = command_prefix_for_guild
        self.bot = bot_instance # L∆∞u bot instance
        self.internal_start_game_callable = internal_start_game_callable # L∆∞u h√†m ƒë·ªÉ g·ªçi l·∫°i
        self.game_starter_used = False # C·ªù cho n√∫t "Ch∆°i L·∫°i"
        self.message_to_edit: discord.Message = None # Message ch·ª©a view n√†y

    async def handle_command_invocation(self, interaction: discord.Interaction, command_name: str, *cmd_args):
        # T·∫°o context gi·∫£ ƒë·ªÉ invoke l·ªánh prefix t·ª´ button
        command_parts = [f"{self.command_prefix_for_guild}{command_name}"]
        command_parts.extend(cmd_args)
        actual_command_to_parse = " ".join(command_parts)

        # G·ª≠i msg t·∫°m ƒë·ªÉ bot parse context
        temp_msg_for_context = await self.channel.send(actual_command_to_parse) 

        mock_context = await self.bot.get_context(temp_msg_for_context) # D√πng self.bot
        mock_context.author = interaction.user 
        mock_context.channel = interaction.channel # K√™nh c·ªßa interaction
        mock_context.interaction = interaction # G·∫Øn interaction v√†o context

        await temp_msg_for_context.delete() # X√≥a msg t·∫°m

        cmd_obj = self.bot.get_command(command_name) # D√πng self.bot
        if cmd_obj:
            try:
                await cmd_obj.invoke(mock_context) # Invoke l·ªánh
            except Exception as e:
                print(f"L·ªói invoke '{command_name}' t·ª´ button PostGameView: {e}")
                traceback.print_exc()
                try: # Th·ª≠ g·ª≠i l·ªói cho user
                    await interaction.followup.send(f"L·ªói khi th·ª±c hi·ªán l·ªánh '{command_name}'. Vui l√≤ng th·ª≠ l·∫°i.", ephemeral=True)
                except discord.HTTPException:
                    print(f"Kh√¥ng th·ªÉ g·ª≠i followup error cho invoke '{command_name}'.")
        else: # L·ªánh ko t√¨m th·∫•y
            try:
                await interaction.followup.send(f"L·ªánh '{command_name}' kh√¥ng t√¨m th·∫•y.", ephemeral=True)
            except discord.HTTPException:
                 print(f"Kh√¥ng th·ªÉ g·ª≠i followup error cho l·ªánh kh√¥ng t√¨m th·∫•y '{command_name}'.")

    @discord.ui.button(label="Ch∆°i L·∫°i", style=discord.ButtonStyle.success, emoji="üîÅ")
    async def play_again_button(self, interaction: discord.Interaction, button: Button):
        if self.game_starter_used: # ƒê√£ d√πng n√∫t n√†y r·ªìi
            await interaction.response.send_message("N√∫t 'Ch∆°i L·∫°i' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ho·∫∑c game m·ªõi ƒë√£ b·∫Øt ƒë·∫ßu.", ephemeral=True)
            return
        
        await interaction.response.defer() # Defer tr∆∞·ªõc
        
        self.game_starter_used = True # ƒê√°nh d·∫•u ƒë√£ d√πng
        button.disabled = True # V√¥ hi·ªáu h√≥a n√∫t
        # V√¥ hi·ªáu h√≥a n√∫t "Xem BXH" n·∫øu c√≥
        if len(self.children) > 1 and isinstance(self.children[1], Button) and self.children[1].label == "Xem BXH":
            self.children[1].disabled = True 

        if self.message_to_edit: # C·∫≠p nh·∫≠t view tr√™n message g·ªëc
            try: 
                await self.message_to_edit.edit(view=self)
            except discord.NotFound: pass # Message ƒë√£ b·ªã x√≥a
            except discord.HTTPException as e_edit: 
                print(f"L·ªói edit message PostGameView play_again: {e_edit}")

        if not isinstance(interaction.channel, discord.TextChannel): # K√™nh ko h·ª£p l·ªá
            await interaction.followup.send("L·ªói: kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu game ·ªü k√™nh n√†y.", ephemeral=True)
            return
        if not interaction.guild_id: # Ko c√≥ guild ID
             await interaction.followup.send("L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh server (guild ID).", ephemeral=True)
             return

        try:
            # G·ªçi h√†m b·∫Øt ƒë·∫ßu game, truy·ªÅn self.bot
            await self.internal_start_game_callable(
                bot=self.bot, # Quan tr·ªçng: truy·ªÅn bot instance
                channel=interaction.channel,
                author=interaction.user, 
                guild_id=interaction.guild_id,
                start_phrase_input=None, # Bot ch·ªçn t·ª´
                interaction=interaction
            )
        except Exception as e:
            print(f"L·ªói g·ªçi internal_start_game t·ª´ PostGameView.play_again_button: {e}")
            traceback.print_exc()
            try: # B√°o l·ªói cho user
                await interaction.followup.send("L·ªói khi b·∫Øt ƒë·∫ßu game (ch∆°i l·∫°i). Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)
            except discord.HTTPException:
                print("Kh√¥ng th·ªÉ g·ª≠i followup error cho play_again_button.")

    @discord.ui.button(label="Xem BXH", style=discord.ButtonStyle.primary, emoji="üèÜ")
    async def view_leaderboard_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer() # Defer tr∆∞·ªõc
        await self.handle_command_invocation(interaction, "bxh") # Gi·∫£ s·ª≠ l·ªánh l√† "bxh"

    async def on_timeout(self): # Khi view h·∫øt h·∫°n
        for item in self.children: # V√¥ hi·ªáu h√≥a t·∫•t c·∫£ item
            item.disabled = True
        if self.message_to_edit: # C·∫≠p nh·∫≠t message g·ªëc
            try:
                content = self.message_to_edit.content
                new_content = content + "\n*(C√°c n√∫t ƒë√£ h·∫øt h·∫°n)*" if content and "C√°c n√∫t ƒë√£ h·∫øt h·∫°n" not in content else "*(C√°c n√∫t ƒë√£ h·∫øt h·∫°n)*"
                embed = self.message_to_edit.embeds[0] if self.message_to_edit.embeds else None
                if embed: # N·∫øu c√≥ embed, th√™m v√†o footer
                    footer_text = "C√°c n√∫t ƒë√£ h·∫øt h·∫°n."
                    if embed.footer and embed.footer.text:
                        if "C√°c n√∫t ƒë√£ h·∫øt h·∫°n." not in embed.footer.text:
                             footer_text = embed.footer.text + " | " + footer_text
                        else: 
                            footer_text = embed.footer.text # ƒê√£ c√≥ text timeout
                    embed.set_footer(text=footer_text)
                    await self.message_to_edit.edit(embed=embed, view=self)
                else: # Ko c√≥ embed, ch·ªâ c·∫≠p nh·∫≠t content
                    await self.message_to_edit.edit(content=new_content, view=self)
            except discord.NotFound: pass
            except discord.HTTPException as e_edit: print(f"L·ªói edit message on_timeout PostGameView: {e_edit}")
            except Exception as e: print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh on_timeout PostGameView: {e}")


class HelpView(View):
    def __init__(self, command_prefix_for_guild: str, bot_instance: commands.Bot, # Nh·∫≠n bot_instance
                 internal_start_game_callable: Callable[..., Coroutine[Any, Any, None]],
                 timeout=180):
        super().__init__(timeout=timeout)
        self.command_prefix_for_guild = command_prefix_for_guild
        self.bot = bot_instance # L∆∞u bot instance
        self.internal_start_game_callable = internal_start_game_callable # L∆∞u h√†m
        self.message_to_edit: discord.Message = None

    @discord.ui.button(label="B·∫Øt ƒê·∫ßu Nhanh (Bot ch·ªçn t·ª´)", style=discord.ButtonStyle.green, emoji="üéÆ")
    async def quick_start_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer() # Defer tr∆∞·ªõc

        if not isinstance(interaction.channel, discord.TextChannel):
            await interaction.followup.send("L·ªói: kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu game ·ªü k√™nh n√†y.", ephemeral=True)
            return
        if not interaction.guild_id:
             await interaction.followup.send("L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh server (guild ID).", ephemeral=True)
             return

        try:
            # G·ªçi h√†m b·∫Øt ƒë·∫ßu game, truy·ªÅn self.bot
            await self.internal_start_game_callable(
                bot=self.bot, # Quan tr·ªçng: truy·ªÅn bot instance
                channel=interaction.channel,
                author=interaction.user,
                guild_id=interaction.guild_id,
                start_phrase_input=None, # Bot ch·ªçn t·ª´
                interaction=interaction
            )
        except Exception as e:
            print(f"L·ªói khi g·ªçi internal_start_game t·ª´ HelpView button: {e}")
            traceback.print_exc()
            try:
                await interaction.followup.send("L·ªói khi b·∫Øt ƒë·∫ßu game nhanh. Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)
            except discord.HTTPException:
                print("Kh√¥ng th·ªÉ g·ª≠i followup error cho quick_start_button.")

        button.disabled = True # V√¥ hi·ªáu h√≥a n√∫t sau khi d√πng
        if self.message_to_edit: # C·∫≠p nh·∫≠t view
            try:
                await self.message_to_edit.edit(view=self)
            except discord.NotFound: pass
            except discord.HTTPException as e_edit:
                print(f"L·ªói khi edit message trong HelpView on quick_start: {e_edit}")

    async def on_timeout(self): # Khi view h·∫øt h·∫°n
        for item in self.children: # V√¥ hi·ªáu h√≥a t·∫•t c·∫£ item
            item.disabled = True
        if self.message_to_edit: # C·∫≠p nh·∫≠t message g·ªëc
            try:
                if self.message_to_edit.embeds: # N·∫øu c√≥ embed
                    embed = self.message_to_edit.embeds[0]
                    footer_text = "(N√∫t h·∫øt h·∫°n)"
                    if embed.footer and embed.footer.text:
                        if "(N√∫t h·∫øt h·∫°n)" not in embed.footer.text:
                            footer_text = embed.footer.text + " | " + footer_text
                        else:
                            footer_text = embed.footer.text 
                    embed.set_footer(text=footer_text)
                    await self.message_to_edit.edit(embed=embed, view=self)
                else: 
                    await self.message_to_edit.edit(view=self) # Ch·ªâ c·∫≠p nh·∫≠t view
            except discord.NotFound: pass
            except discord.HTTPException as e_edit: print(f"L·ªói edit message on_timeout HelpView: {e_edit}")
            except Exception as e: print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh on_timeout HelpView: {e}")